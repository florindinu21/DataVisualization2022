# -*- coding: utf-8 -*-
"""StrokePlots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dqx7nXbOaWMJnUuBztwOwsG445atbyIM
"""

!pip install pyspark
!wget -q https://downloads.apache.org/spark/spark-3.0.1/spark-3.0.1-bin-hadoop3.2.tgz
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from pyspark.sql import SparkSession
from pyspark.sql.functions import count
from pyspark.sql.functions import col, isnan, when, count, lit

import DataInit

# Get data from DataInit file
data_frame = DataInit.get_data_frame()
data_frame.show()
data = data_frame.toPandas()

# Start EDA
print("*** Started Exploratory Data Analysis ***")

print("Show summary")
DataInit.data_summary_show(data_frame)
print("Show inconsistent data (i.e null, nan, etc.)")
data_frame.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in data_frame.columns]).show()

# Show EDA plots

data = data_frame.toPandas()
data['gender'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90, explode=[0.1, 0.1, 0.1], figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
data['stroke'].value_counts().plot.pie(autopct='%1.2f%%', explode=[0.1, 0.1], figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
data['heart_disease'].value_counts().plot.pie(autopct='%1.2f%%', explode=[0.1, 0.1], figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
data['hypertension'].value_counts().plot.pie(autopct='%1.2f%%', explode=[0.1, 0.1], figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
data['ever_married'].value_counts().plot.pie(autopct='%1.2f%%', explode=[0.1, 0.1], figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
data['Residence_type'].value_counts().plot.pie(autopct='%1.2f%%', figsize=(9,6), colors = ['#25BBAA', '#e3a59c'], textprops={'fontsize': 12})

data = data_frame.toPandas()
chart = sns.countplot(x='work_type', data=data, palette=('#e3a59c','#E1503C','#25BBAA', '#17F9DF'))
chart.set_xticklabels(chart.get_xticklabels(), rotation=90)

data = data_frame.toPandas()
chart = sns.countplot(x='smoking_status', data=data, palette=('#e3a59c','#E1503C','#25BBAA', '#17F9DF'))
chart.set_xticklabels(chart.get_xticklabels(), rotation=90)

data = data_frame.toPandas()
sns.histplot(x='age', data=data, color="#25BBAA");

data = data_frame.toPandas()
sns.histplot(x='avg_glucose_level', data=data, color="#25BBAA");

data = data_frame.toPandas()
sns.histplot(x='bmi', data=data, color="#25BBAA");

data_frame.filter(data_frame.bmi == "N/A").count()

data_frame= data_frame.filter(data_frame.bmi != 'N/A')
data = data_frame.toPandas()

# Convert from object to numeric type
data["bmi"] = pd.to_numeric(data["bmi"])
sns.histplot(x='bmi', data=data, color="#25BBAA");

print("*** Finished Exploratory Data Analysis ***")

data_frame = DataInit.data_cleaning(data_frame)

print("***Show data after clean***")
data_frame.printSchema()
data_frame.select('gender').distinct().collect()
data_frame.select('smoking_status').distinct().collect()
print("Records with bmi == N/A")
data_frame.filter(data_frame.bmi == "N/A").show(truncate=False)
data_frame.groupBy('gender').count().show()

data = data_frame.toPandas()
data_age = data['age']
data_stroke = data['stroke'] == 1
data_non_stroke = data['stroke'] == 0

fig = plt.figure(figsize=(12, 12), dpi=90)
gs = fig.add_gridspec(2,2)
gs.update(wspace=0.5, hspace=0.5)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])

sns.kdeplot(ax=ax0, data=data_age, color='#25BBAA', shade=True, linewidth=1.5, ec='black',alpha=1)
sns.kdeplot(ax=ax1, x=data.loc[data_stroke]['age'], shade=True, color='#e3a59c',label='Stroke', linewidth=1.5, ec='black',alpha=0.7)
sns.kdeplot(ax=ax1,x=data.loc[data_non_stroke]['age'],color='#25BBAA',label='No Stroke',shade=True, linewidth=1.5, ec='black',alpha=0.5)
ax1.legend(loc = 'upper left')
ax0.text(1,0.022,'Age distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')
ax1.text(1,0.045,'Age and Stroke distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')

data = data_frame.toPandas()
data_glucose = data['avg_glucose_level']
data_stroke = data['stroke'] == 1
data_non_stroke = data['stroke'] == 0

fig = plt.figure(figsize=(12, 12), dpi=90)
gs = fig.add_gridspec(2,2)
gs.update(wspace=0.5, hspace=0.5)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])

sns.kdeplot(ax=ax0, data=data_glucose, color='#25BBAA', shade=True, linewidth=1.5, ec='black',alpha=1)
sns.kdeplot(ax=ax1, x=data.loc[data_stroke]['avg_glucose_level'], shade=True, color='#e3a59c',label='Stroke', linewidth=1.5, ec='black',alpha=0.7)
sns.kdeplot(ax=ax1,x=data.loc[data_non_stroke]['avg_glucose_level'],color='#25BBAA',label='No Stroke',shade=True, linewidth=1.5, ec='black',alpha=0.5)
ax1.legend(loc = 'upper right')
ax0.text(1,0.0175,'Avg_glucose_level distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')
ax1.text(1,0.018,'Avg_glucose_level and Stroke distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')

data_frame= data_frame.filter(data_frame.bmi != 'N/A')
data = data_frame.toPandas()

# Convert from object to numeric type
data["bmi"] = pd.to_numeric(data["bmi"])

data_bmi = data['bmi']
data_stroke = data['stroke'] == 1
data_non_stroke = data['stroke'] == 0

fig = plt.figure(figsize=(12, 12), dpi=90)
gs = fig.add_gridspec(2,2)
gs.update(wspace=0.5, hspace=0.5)
ax0 = fig.add_subplot(gs[0,0])
ax1 = fig.add_subplot(gs[0,1])

sns.kdeplot(ax=ax0, data=data_bmi, color='#25BBAA', shade=True, linewidth=1.5, ec='black',alpha=1)
sns.kdeplot(ax=ax1, x=data.loc[data_stroke]['bmi'], shade=True, color='#e3a59c',label='Stroke', linewidth=1.5, ec='black',alpha=0.7)
sns.kdeplot(ax=ax1,x=data.loc[data_non_stroke]['bmi'],color='#25BBAA',label='No Stroke',shade=True, linewidth=1.5, ec='black',alpha=0.5)
ax1.legend(loc = 'upper right')
ax0.text(1,0.0745,'Bmi distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')
ax1.text(1,0.08,'Bmi and Stroke distribution',fontsize = 20,fontfamily='Arial', verticalalignment = 'center')

data = data_frame.toPandas()
sns.countplot(y = data['gender'], hue=data['stroke'], palette=('#25BBAA','#e3a59c'))

data = data_frame.toPandas()
sns.countplot(y = data['Residence_type'], hue=data['stroke'], palette=('#25BBAA','#e3a59c'))

data = data_frame.toPandas()
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
sns.countplot(y = data['work_type'], hue=data['stroke'], palette=('#25BBAA','#e3a59c'))

data = data_frame.toPandas()
sns.countplot(y = data['ever_married'], hue=data['stroke'], palette=('#25BBAA','#e3a59c'))
plt.legend(loc='right',  title='stroke')

data = data_frame.toPandas()
fig = plt.figure(figsize=(5, 5), dpi=90)
sns.countplot(y = data['heart_disease'], hue=data['stroke'], palette=('#25BBAA','#e3a59c'))
plt.legend(loc='right',  title='stroke')